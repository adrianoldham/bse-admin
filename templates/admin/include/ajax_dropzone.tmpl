    <div>
      <div id="drop-target" data-drop="target" style="display: none;">
        <h2>Quick Image Upload</h2>
        Drag and drop images here
      </div>
      <ul id="drop-list" data-drop="list" class="full list inset" style="display: none;"></ul>
    </div>
    <script type="text/javascript">
    if (window.FormData) {
        document.observe("dom:loaded", function() {
        
            var pendingClass = "debug";
            var activeClass = "info";
            var completedClass = "notice";
            var errorClass = "error";
            var dragClass = "notice over";
            
            var dropTarget = $("drop-target");
            var dropList = $("drop-list");
            var dropDone = $$("[data-action=Cancel]")[0];
        
            var activeFiles = [];
            var transferActive = false;
    
            dropTarget.show();

            function startTransfer() {
                var file = activeFiles.shift();
                file.element.removeClassName(pendingClass); // pending
                file.element.addClassName(activeClass); // active
                var fd = new FormData();
                fd.append("<:= type:>", file.file, file.name);
                fd.append("id", "<:= article.id:>");
                fd.append("<:= target:>", "1");
                var r = new XMLHttpRequest();
                r.open("POST", "<:= cfg.admin_url("add"):>", true);
                try {
                    r.responseType = "json";
                } catch (e) {} // ignore failure, like on Safari
                r.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                r.upload.addEventListener("progress", function(e) {
                    // update progress bar
                    file.pb.show();
                    file.pb.update(Math.round(100 * e.loaded / e.total));
                    file.pb.max = e.total;
                    file.pb.value = e.loaded;
                });
                r.addEventListener("load", function(e) {
                    var r = e.target;
                    file.element.removeClassName(activeClass); // inactive
                    file.pb.hide();
                    transferActive = false;
                    if (r.status == 200) {
                        var resp = r.response;
                        if (r.responseType != "json") {
                            // IE/Safari doesn't support it
                            resp = JSON.parse(r.responseText);
                        }
                        if (resp.success != 0) {
                            file.element.update(file.file.name);
                            file.element.addClassName(completedClass); // complete
                        } else {
                            var error = "unknown";
                            if (resp.message) {
                                error = resp.message;
                            } else if (resp.errors && resp.errors.image) {
                                error = resp.errors.image;
                            } else if (resp.error_code) {
                                error = resp.error_code;
                            }
    
                            file.element.update(file.file.name + ": " + error);
                            file.element.addClassName(errorClass);
                        }
                    } else {
                        file.element.addClassName(errorClass);
                        file.element.update(file.file.name + ": " + r.status + " " + r.statusText);
                    }
                    if (activeFiles.length != 0) {
                        startTransfer();
                    }
                });
                r.addEventListener(errorClass, function(e) {
                    var r = e.target;
                    transferActive = false;
                    file.element.removeClassName(activeClass); // inactive
                    file.element.addClassName(errorClass);
                    file.element.update(file.file.name + ": " + r.status + " " + r.statusText);
                    if (activeFiles.length != 0) {
                        startTransfer();
                    }
                });
                transferActive = true;
                r.send(fd);
            }
    
            dropTarget.addEventListener("dragenter", function(e) {
                e.stopPropagation();
                e.preventDefault();
            }, false);
            dropTarget.addEventListener("dragleave", function(e) {
                this.removeClassName(dragClass);
                e.stopPropagation();
                e.preventDefault();
            }, false);
            dropTarget.addEventListener("dragover", function(e) {
                this.addClassName(dragClass);
                e.stopPropagation();
                e.preventDefault();
            }, false);
            dropTarget.addEventListener("drop", function(e) {
                this.removeClassName(dragClass);
                e.stopPropagation();
                e.preventDefault();
    
                var f = e.dataTransfer.files;
                dropList.show();
                for (var i = 0; i < f.length; ++i) {
                    var file = f[i];
                    var fe = new Element("li", {
                        className: pendingClass // pending
                    });
                    var pb = new Element("progress");
                    fe.update(file.name);
                    fe.appendChild(pb);
                    dropList.appendChild(fe);
                    activeFiles.push({
                        file: file,
                        element: fe,
                        pb: pb
                    });
                }
                if (!transferActive) {
                    startTransfer();
                    if (dropDone) {
                        dropDone.update("Done");
                    }
                }
            }, false);
        });
    }
    </script>