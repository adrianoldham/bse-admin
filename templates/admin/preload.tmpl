<:# define globals :>
<:-.set dist_image_uri = cfg.entryIfVar("uri", "dist_images", "/images") -:>
<:-.set errors = request.field_errors -:>
<:-.set request = bse.admin ? generator.request : request -:>

<:-.define admin_styles -:>
<style>
*[class^=bse-] {
    position: relative;
    z-index: 1;
}

*[class^=bse-] img {
    border: 0;
}

.bse-label {
    font-size: 10px;
    line-height: 14px;
    color: white;
    background-color: #666;
    min-width: 14px;
    padding: 0 3px;
    margin-right: 3px;
    display: inline-block;
    text-align: center;
}

.bse-arrows {
    margin-left: 3px;
    display: inline-block;
}
</style>
<:-.end define :>

<:# utility definitions :>
<:-.define make_select; "groups":0, "grouplabel":"label", "groupid":"id", "itemgroupid":"groupid", "autofocus":0, "readonly":0, "disabled":0 -:>
          <:-.if !default.defined :>
          <:-.set default = "" :>
          <:-.end if :>
          <select name="<:= name :>" id="<:= name :>"
            <:-= autofocus ? ' autofocus="autofocus"' : '' | raw :>
            <:-= required ? ' required="required"' : '' | raw :>
            <:-= disabled or readonly ? ' disabled="disabled"' : '' | raw :>
            <:-= errors.$name ? ' class="error"' : '' | raw -:>
          >
          <:-.if groups :>
            <:-.for i in list :>
            <:-.if i.$itemgroupid eq "" :>
            <option value="<:= i.$id :>"
              <:-= i.$id eq default ? ' selected="selected"' : '' | raw -:>
            >
              <:-= i.$desc -:>
            </option>
            <:-.end if :>
            <:-.end for :>
            <:-.for g in groups :>
            <optgroup label="<:= g.$grouplabel :>">
              <:-.for i in list :>
              <:-.if i.$itemgroupid == g.$groupid :>
              <option value="<:= i.$id :>"
                <:-= i.$id eq default ? ' selected="selected"' : '' | raw -:>
              >
                <:-= i.$desc -:>
              </option>
              <:-.end if :>
              <:-.end for :>
            </optgroup>
            <:-.end for :>
          <:-.else :>
            <:-.for i in list :>
            <option value="<:= i.$id :>"
              <:-= i.$id eq default ? ' selected="selected"' : '' | raw -:>
            >
              <:-= i.$desc -:>
            </option>
            <:-.end for :>
          <:-.end if :>
          </select>
<:-.end define :>


<:# make_multicheck expects:
  values - list of hashes
  default - a list of ids of checks to be checked
  id - the name of the id field
  desc - the name of the description field.
  name - the name of the input elements
  readonly - true to make it readonly
:>
<:-.define make_multicheck; "readonly":0, "disabled":0 -:>
      <:-.if !readonly :>
      <input type="hidden" name="_save_<:= name :>" value="1" />
      <:-.end if :>
      <:-.if !default.defined :>
        <:-.set default = [] :>
      <:-.end if :>
      <:-.set checked = {} :>
      <:-.for v in default :>
        <:-% checked.set(v, 1) :>
      <:-.end for :>
      <ul>
        <:-.for i in values :>
        <li>
          <:-.set element_id = name _ "-" _ i.$id :>
          <input type="checkbox" name="<:= name :>" id="<:= element_id :>" value="<:= i.$id :>"
            <:-= checked[i.$id] ? ' checked="checked" ' : '' | raw :>
            <:-= disabled or readonly ? ' disabled="disabled"' : '' | raw :> />
          <label for="<:= element_id :>"><:= i.$desc :></label>
        </li>
        <:-.end for :>
      </ul>
<:-.end define :>


<:# paramaters:
  base - base url for links
  pages - the result of the bse.pages call
:>
<:-.define page_list -:>
<:-.set sep = base =~ /\?/ ? "&" : "?" :>
<:-.set base = base _ sep :>
  <p class="pagination">
    Page <:= pages.page :> of <:= pages.pagecount :>
    <:-.if pages.previous_page :>
    <a href="<:= base :><:= pages.pname | uri :>=1&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">|←</a>
    <a href="<:= base :><:= pages.pname | uri :>=<:= pages.previous_page | uri :>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">←</a>
    <:-.else :>
    <span class="disabled">|←</span>
    <span class="disabled">←</span>
    <:-.end if :>
    <:-.for p in pcats.pages :>
    <:-.if p.link :>
    <a href="<:= base :><:= pages.pname | uri :>=<:= p.page | uri :>&amp;<:=pages.ppname | uri :>=<:= pages.pp | uri :>"><:= p.page :></a>
    <:-.else :>
    <span class="disabled"><:= p.page :></span>
    <:-.end if :>
    <:-.end for :>
    <:-.if pages.next_page :>
    <a href="<:= base :><:= pages.pname | uri :>=<:= pages.next_page | uri :>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">→</a>
    <a href="<:= base :><:= pages.pname | uri :>=<:= pages.pagecount | uri :>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">→|</a>
    <:-.else :>
    <span class="disabled">→</span>
    <span class="disabled">→|</span>
    <:-.end if :>
  </p>
<:-.end define :>


<:# parameters:
  name - field name
  default
:>
<:-.define old -:>
<:-.if cgi.param(name).defined :>
  <:-= cgi.param(name) :>
<:-.else :>
  <:-= default :>
<:-.end if :>
<:-.end define :>


<:# parameters:
   name - name of field
   index - index of field
   errors - hash of error messages (should be set by code)
:>
<:-.define error_img_n -:>
  <:-.if errors.$name :>
    <:-.set msg = errors.$name :>
    <:-.set msg = msg.is_list ? msg[index] : msg :>
    <:-.if msg.defined :>
    <:-.set image = cfg.entry("error_img", "image", dist_image_uri _ "/icons/error.png") :>
    <:-.set width = cfg.entry("error_img", "width", 18) :>
    <:-.set height = cfg.entry("error_img", "height", 18) :>
    <img src="<:= image :>" alt="<:= msg :>" title="<:= msg :>" width="<:= width :>" height="<:= height :>" class="error_img" />
    <:-.end if :>
  <:-.end if :>
<:-.end define :>


<:-.define error_classname -:>
  <:-.if errors.$name :>
    <:-.set msg = errors.$name :>
    <:-.set msg = msg.is_list ? msg[index] : msg :>
    <:-.if msg.defined :>
    error
    <:-.end if :>
  <:-.end if :>
<:-.end define :>


<:-.define error_img -:>
<:-.call "error_img_n", "index":0 :>
<:-.end define :>


<:-.define required_indicator -:>
<:-.if required :> <span class="required">*</span>
<:-.end if :>
<:-.end define :>


<:# paramaters:
  name - field name
  fields - hash of fields (may be set by page instead)
  object - source for defaults in edit mode
:>
<:-.define input; "accesskey":0, "title":0, "autofocus":0, "placeholder":0, "readonly":0, "disabled":0 :>
    <:-.if object :>
      <:-.set default = object.$name :>
    <:-.elsif field.default :>
      <:-.set default = field.default :>
    <:-.else :>
      <:-.set default = "" :>
    <:-.end if :>

    <:-.if field.type and field.type eq "date" and default ne "" :>
      <:-.set default = bse.date("%d/%m/%Y", default ) :>
    <:-.elsif field.type and field.type eq "time" and default ne "" :>
      <:-.set default = bse.date(default =~ /:00$/ ? "%I:%M%p" : "%I:%M:%S%p", default).replace(/^0/, "").lower :>
    <:-.elsif field.type and field.type eq "money" and default ne "" :>
      <:-.set default = bse.number("money", default ) :>
    <:-.end if :>

    <:-.if cgi.param(name).defined :>
      <:-.set default = cgi.param(name) :>
    <:-.end if :>
          <:-.if field.htmltype eq "textarea" :>
          <textarea name="<:= name :>" id="<:= name :>" rows="<:= field.height ? field.height : cfg.entry("forms", "textarea_rows", 10) :>" cols="<:= field.width ? field.width : cfg.entry("textarea_cols", 60) :>"
            <:-= title ? ' title="' _ title _ '"' : '' | raw :>
            <:-= accesskey ? ' accesskey="' _ accesskey _ '"' : '' | raw :>
            <:-= placeholder ? ' placeholder="' _ placeholder _ '"' : '' | raw :>
            <:-= field.required ? ' required="required"' : '' | raw :>
            <:-= autofocus ? ' autofocus="autofocus"' : '' | raw :>
            <:-= readonly ? ' readonly="readonly"' : '' | raw :>
            <:-= disabled ? ' disabled="disabled"' : '' | raw :>
            <:-= errors.$name ? ' class="error"' : '' | raw -:>
          >
            <:-= default -:>
          </textarea>
          <:-.elsif field.htmltype eq "checkbox" :>
          <:-.set is_checked = request.method() eq 'post' ? cgi.param(name).defined : default :>
          <input type="hidden" name="_save_<:= name :>" value="1" />
          <input type="checkbox" name="<:= name :>" id="<:= name :>" value="<:= field.value ? field.value : 1 :>"
            <:-= is_checked ? ' checked="checked"' : '' | raw :>
            <:-= field.required ? ' required="required"' : '' | raw :>
            <:-= disabled or readonly ? ' disabled="disabled"' : '' | raw :> />
          <:-.elsif field.htmltype eq "multicheck" :>
          <:-# we expect default to be a list of selected checks :>
          <:-.set values = field.select["values"] :>
          <:-.set values = values.is_code ? values() : values :>
          <:-.set default = cgi.param("_save_" _ name) ? [ cgi.param(name) ] : default :>
          <:-.call "make_multicheck",
            "id":field.select.id,
            "desc":field.select.label,
            "disabled":disabled
          :>
          <:-.elsif field.htmltype eq "select" and !readonly :>
          <:-.set values = field.select["values"] :>
          <:-.set values = values.is_code ? values() : values :>
          <:-.call "make_select",
            "name":name,
            "default":default,
            "list":values,
            "id":field.select.id,
            "desc":field.select.label,
            "accesskey":accesskey,
            "title":title,
            "required":field.required,
            "autofocus":autofocus,
            "disabled":disabled,
            "groupid":(field.select.groupid or "id"),
            "itemgroupid":(field.select.itemgroupid or "groupid"),
            "groups":field.select.groups ? (field.select.groups.is_code ? (field.select.groups)() : field.select.groups ) : 0,
            "grouplabel":(field.select.grouplabel or "label")
          :>
          <:-.else :>
          <input type="<:= field.htmltype or "text" :>" name="<:= name :>" id="<:= name :>" value="<:= default :>"
            <:-= field.width ? ' size="' _ field.width _ '"' : '' | raw :>
            <:-= field.maxlength ? ' maxlength="' _ field.maxlength _ '"' : '' | raw :>
            <:-= accesskey ? ' accesskey="' _ accesskey _ '"' : '' | raw :>
            <:-= title ? ' title="' _ title _ '"' : '' | raw :>
            <:-= placeholder ? ' placeholder="' _ placeholder _ '"' : '' | raw :>
            <:-= field.required ? ' required="required"' : '' | raw :>
            <:-= autofocus ? ' autofocus="autofocus"' : '' | raw :>
            <:-= readonly ? ' readonly="readonly"' : '' | raw :>
            <:-= disabled ? ' disabled="disabled"' : '' | raw :>
            <:-= errors.$name ? ' class="error"' : '' | raw :> />
          <:-.end if :>
<:-.end define :>


<:# paramaters:
  name - field name
  fields - hash of fields (may be set by page instead)
:>
<:-.define field -:>
  <:-.if fields.is_hash -:>
    <:-.set field = fields[name] -:>
    <:-.if field :>
      <:-.call "inlinefield", "name":name, "field":field :>
    <:-.else :>
      <p>Unknown field id '<b><:= name :></b>', available fields are '<:= fields.keys.join("', '") :>'</p>
    <:-.end if :>
  <:-.else :>
      <p>fields isn’t a hash, something is wrong.</p>
  <:-.end if :>
<:-.end define :>


<:# parameters:
  name - the field name
  field - a field, as an entry in fields
:>
<:-.define inlinefield -:>
    <:-.if field.is_hash -:>
      <div>
        <label for="<:= name :>">
          <:-= field.nolabel ? '' : field.description :>
          <:-.call "required_indicator", "required":field.required :>
          <:-.call "error_img", "name":name -:>
        </label>
        <span>
          <:-.call "input", "name":name, "field":field :>
          <:-.if field.units :>
          <:= field.units :>
          <:-.end if :>
        </span>
      </div>
    <:-.end if :>
<:-.end define :>


<:# like field, but wrap in a per-field field set.
parameters:
  name - field name
  fields - hash of fields (may be set by page instead)
:>
<:-.define fieldset -:>
  <:-.set field = fields[name] -:>
  <:-.if field.is_hash -:>
    <fieldset>
      <:-.if !field.nolabel :>
      <legend><:= field.description :></legend>
      <:-.end if :>
      <:-.call "input", "name":name, "field":field :>
    </fieldset>
  <:-.elsif fields.is_hash :>
    <p>Unknown field id '<b><:= name :></b>', available fields are '<:= fields.keys.join("', '") :>'</p>
    <:-.else :>
    <p>fields isn’t a hash, something is wrong.</p>
  <:-.end if :>
<:-.end define :>


<:# parameters:
  name - the field name
  field - a field, as an entry in fields
:>
<:-.define inlinefieldro -:>
    <:-.if field.is_hash -:>
      <div>
        <label for="<:= name :>"><:= field.nolabel ? "" : field.description :></label>
        <span>
          <:-.call "input", "name":name, "field":field, "readonly":1 :>
          <:-.if field.units :>
          <:= field.units :>
          <:-.end if :>
        </span>
      </div>
    <:-.end if :>
<:-.end define :>


<:# like field, but for display, not editing :>
<:-.define fieldro -:>
  <:-.if fields.is_hash -:>
    <:-.set field = fields[name] -:>
    <:-.if field :>
    <:-.call "inlinefieldro", "name":name, "field":field :>
    <:-.else :>
    <p>Unknown field id '<b><:= name :></b>', available fields are '<:= fields.keys.join("', '") :>'</p>
    <:-.end if :>
  <:-.else :>
    <p>fields isn’t a hash, something is wrong.</p>
  <:-.end if :>
<:-.end define :>


<:# like fieldro, but wrap in a per-field field set.
parameters:
  name - field name
  fields - hash of fields (may be set by page instead)
:>
<:-.define fieldsetro -:>
  <:-.set field = fields[name] -:>
  <:-.if field.is_hash -:>
    <fieldset>
      <:-.if !field.nolabel :>
      <legend><:= field.description :></legend>
      <:-.end if :>
      <:-.call "input", "name":name, "field":field, "readonly":1 :>
    </fieldset>
  <:-.elsif fields.is_hash :>
    <p>Unknown field id '<b><:= name :></b>', available fields are '<:= fields.keys.join("', '") :>'</p>
    <:-.else :>
    <p>fields isn’t a hash, something is wrong.</p>
  <:-.end if :>
<:-.end define :>


<:-.define messages -:>
  <:-.if request.messages.size :>
    <div id="message">
      <:-.for message in request.messages :>
      <div class="message <:= message.class :> <:-= message.class eq 'error' ? ' red' : message.class eq 'warning' ? ' orange' : ' green' :>">
        <:-= message.html -:>
      </div>
      <:-.end for :> 
    </div>
  <:-.end if :>
<:-.end define :>


<:-.define edit_child; "admin":0, "label":0, "referer_id":top.id, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.set child = loop.current -:>
<span class="bse-admin bse-admin-buttons-mini">
  <:-.if label :>
  <b class="bse-label"><:= label :></b>
  <:-.end if:>

  <:-.if parent.id == child.parentid -:>
  <:-.set action_url = cfg.admin_url("add", { "id":child.id, "referer":referer_id }) -:>
  <a href="<:= action_url :>" title="Edit Article… (Id <:= child.id:>)" target="_top">
    <:-.call "make_button_img", "name":"action" -:>
  </a>

  <:-.else -:>
  <:-.set action_url = cfg.admin_url("add", { "id":parent.id, "stepkid":child.id, "_t":"steps", "referer":referer_id }) -:>
  <a href="<:= action_url :>" title="Edit Stepchild… (Id <:= child.id:>)" target="_top">
    <:-.call "make_button_img", "name":"action" -:>
  </a>
  <:-.end if -:>

  <:-.if request.user_can("bse_edit_delete_article", child) and (parent.id == child.parentid) -:>
  <:-.set delete_url = cfg.admin_url("add", { "remove":1, "id":child.id, "_csrfp":request.get_csrf_token("admin_remove_article"), "r":r }) -:>
  <a href="<:= delete_url :>" title="Delete Article (Id <:= child.id:>)" onclick="return window.confirm('Are you sure you want to delete this Article?')">
    <:-.call "make_button_img", "name":"delete" -:>
  </a>

  <:-.elsif request.user_can("bse_edit_stepkid_delete", parent) and request.user_can("bse_edit_stepparent_delete", child) -:>
  <:-.set delete_url = cfg.admin_url("add", { "del_stepkid":1, "id":parent.id, "stepkid": child.id, "_csrfp":request.get_csrf_token("admin_remove_stepkid"), "r":r }) -:>
  <a href="<:= delete_url :>" title="Delete Stepchild (Id <:= child.id:>)" onclick="return window.confirm('Are you sure you want to remove the Stepchild relationship?')">
    <:-.call "make_button_img", "name":"delete" -:>
  </a>

  <:-.else -:>
    <:-.call "make_button_img", "name":"delete", "disabled":1 -:>
  <:-.end if -:>
</span>
<:-.end if -:>
<:-.end define :>


<:-.define edit_image; "admin":0, "label":0, "referer_id":top.id, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.if request.user_can("bse_edit_images_save", article) -:>
<:-.set article_id = article.id -:>
<:-.set image_id = loop.current.id -:>
<span class="bse-admin bse-admin-buttons-mini">
  <:-.if label :>
  <b class="bse-label"><:= label :></b>
  <:-.end if:>

  <:-.set action_url = cfg.admin_url("add", { "a_edit_image":1, "id":article_id, "image_id":image_id, "referer":referer_id }) -:>
  <a href="<:= action_url :>" title="Edit Image… (Id <:= image_id:>)" target="_top">
    <:-.call "make_button_img", "name":"action" -:>
  </a>

  <:-.if request.user_can("bse_edit_images_delete", article) -:>
  <:-.set delete_url = cfg.admin_url("add", { "removeimg_" _ image_id:1, "id":article_id, "_csrfp":request.get_csrf_token("admin_remove_image"), "r":r }) -:>
  <a href="<:= delete_url :>" title="Delete Image (Id <:= image_id:>)" onclick="return window.confirm('Are you sure you want to delete this Image?')">
    <:-.call "make_button_img", "name":"delete" -:>
  </a>

  <:-.else -:>
    <:-.call "make_button_img", "name":"delete", "disabled":1 -:>
  <:-.end if -:>
</span>
<:-.end if -:>
<:-.end if -:>
<:-.end define :>


<:-.define edit_file; "admin":0, "label":0, "referer_id":0, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.if request.user_can("bse_edit_files_save", article) -:>
<:-.set article_id = article.id -:>
<:-.set file_id = loop.current.id -:>
<span class="bse-admin bse-admin-buttons-mini">
  <:-.if label :>
  <b class="bse-label"><:= label :></b>
  <:-.end if:>

  <:-.set action_url = cfg.admin_url("add", { "a_edit_file":1, "id":article_id, "file_id":file_id, "referer":referer_id }) -:>
  <a href="<:= action_url :>" title="Edit File… (Id <:= file_id:>)" target="_top">
    <:-.call "make_button_img", "name":"action" -:>
  </a>

  <:-.if request.user_can("bse_edit_files_delete", article) -:>
  <:-.set delete_url = cfg.admin_url("add", { "filedel":1, "id":article_id, "file":file_id, "_csrfp":request.get_csrf_token("admin_remove_file"), "r":r }) -:>
  <a href="<:= delete_url :>" title="Delete File (Id <:= file_id:>)" onclick="return window.confirm('Are you sure you want to delete this File?')">
    <:-.call "make_button_img", "name":"delete" -:>
  </a>

  <:-.else -:>
    <:-.call "make_button_img", "name":"delete", "disabled":1 -:>
  <:-.end if -:>
</span>
<:-.end if -:>
<:-.end if -:>
<:-.end define :>


<:-.define make_button_img; "disabled":0 -:>
<:-.set disabled = disabled ? "-disabled" : "" -:>

<:-.if name eq "action" -:>
<img src='<:= (dist_image_uri _ "/adminmenu/action-mini" _ disabled _ ".png") :>' width="14" height="14" alt="Edit" />

<:-.elsif name eq "delete" -:>
<img src='<:= (dist_image_uri _ "/adminmenu/delete-mini" _ disabled _ ".png") :>' width="15" height="14" alt="Delete" />

<:-.end if -:>
<:-.end define :>


<:# expects:
  loop
  parent

  which in most cases means you can just supply parent
:>
<:-.define move; "admin":0, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.if request.user_can("bse_edit_reorder_children", parent) -:>

<:-.set down_url = loop.next ? cfg.admin_url("move", { "stepparent":parent.id, "d":"swap", "id":loop.current.id, "other":loop.next.id, "r":r }) : 0 -:>
<:-.set up_url = loop.prev ? cfg.admin_url("move", { "stepparent":parent.id, "d":"swap", "id":loop.current.id, "other":loop.prev.id, "r":r }) : 0 -:>

<:.call "make_arrows", "down_url":down_url, "up_url":up_url :>

<:-.end if -:>
<:-.end if -:>
<:-.end define :>


<:-.define move_image; "admin":0, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.if request.user_can("bse_edit_images_reorder", article) -:>

<:-.set down_url = loop.next ? cfg.admin_url("add", { "moveimgdown":1, "id":article.id, "imageid":loop.current.id, "_csrfp":request.get_csrf_token("admin_move_image"), "r":r }) : 0 -:>
<:-.set up_url = loop.prev ? cfg.admin_url("add", { "moveimgup":1, "id":article.id, "imageid":loop.current.id, "_csrfp":request.get_csrf_token("admin_move_image"), "r":r }) : 0 -:>

<:.call "make_arrows", "down_url":down_url, "up_url":up_url :>

<:-.end if -:>
<:-.end if -:>
<:-.end define :>


<:-.define move_file; "admin":0, "r":top.admin -:>
<:-.if bse.admin or admin -:>
<:-.if request.user_can("bse_edit_files_reorder", article) -:>

<:-.set down_url = loop.next ? cfg.admin_url("add", { "fileswap":1, "id":article.id, "file1":loop.current.id, "file2":loop.next.id, "_csrfp":request.get_csrf_token("admin_move_file"), "r":r }) : 0 -:>
<:-.set up_url = loop.prev ? cfg.admin_url("add", { "fileswap":1, "id":article.id, "file1":loop.current.id, "file2":loop.prev.id, "_csrfp":request.get_csrf_token("admin_move_file"), "r":r }) : 0 -:>

<:.call "make_arrows", "down_url":down_url, "up_url":up_url :>

<:-.end if -:>
<:-.end if -:>
<:-.end define :>


<:-.define make_arrows -:>
<:-.set class = cfg.entry("arrows", "class", "bse-arrows") -:>
<:-.set width = cfg.entry("arrows", "image_width", 17) -:>
<:-.set height = cfg.entry("arrows", "image_height", 14) -:>
<:-.set extras = 'width="' _ width _ '" height="' _ height _ '"' -:>

<:-.set down_img = '<img src="' _ cfg.entry("arrows", "downimg", dist_image_uri _ "/admin/move-down.png").escape("html") _ '" ' _ extras _ ' alt="Down" />' -:>
<:-.set up_img = '<img src="' _ cfg.entry("arrows", "upimg", dist_image_uri _ "/admin/move-up.png").escape("html") _ '" ' _ extras _ ' alt="Up" />' -:>
<:-.set down_img_disabled = '<img src="' _ cfg.entry("arrows", "downimg_disabled", dist_image_uri _ "/admin/move-down-disabled.png").escape("html") _ '" ' _ extras _ ' alt="Down" />' -:>
<:-.set up_img_disabled = '<img src="' _ cfg.entry("arrows", "upimg_disabled", dist_image_uri _ "/admin/move-up-disabled.png").escape("html") _ '" ' _ extras _ ' alt="Up" />' -:>

<:-.if down_url or up_url -:>

<span class="<:= class :>">
<:-.if down_url -:>
<a href="<:= down_url :>"><:= down_img | raw :></a>
<:-.else -:>
<:= down_img_disabled | raw :>
<:-.end if -:>

<:-.if up_url -:>
<a href="<:= up_url :>"><:= up_img | raw :></a>
<:-.else -:>
<:= up_img_disabled | raw :>
<:-.end if -:>
</span>

<:-.end if -:>
<:-.end define :>


<:- include admin/include/preload.tmpl optional -:>
<:- include admin/include/custom/preload.tmpl optional -:>
<:- include include/custom/preload.tmpl optional -:>
<:- include include/preload.tmpl optional -:>