<:-.wrap "admin/base.tmpl", "title": "Edit Option" :>

<:-.set referer = request.referer -:>
<:-.set cgi_referer = cgi.param("referer") -:>

<:-.if referer =~ cfg.admin_url("admin") -:>
<:-.set done_url = cfg.admin_url("add", { "id": ( cgi_referer ? cgi_referer : article.id ), "preview": 1 }) -:>

<:-.elsif cgi_referer and referer and referer !~ /logon/ -:>
<:-.set done_url = referer.replace(/(&amp;|&|\?)referer=[\d]+/, "").replace(/\.pl&(mp;)?/, ".pl?") -:>

<:-.else -:>
<:-.set done_url = cfg.admin_url("add", { "id": article.id }) -:>

<:-.end if -:>

<:-.set object = 0 -:>

<div class="window dialog">
  <header>
    <:-.set pagetitle = params.title _ " - " _ ( article.titleAlias or article.title ) _ " (Level " _ article.level _ ")" :>
    <h1><:= pagetitle:></h1>
    <nav data-role="toolbar">
      <a href="<:= cfg.admin_url("add", { "id": article.id }):>" data-icon="back" data-icon-only="true" class="button">Back</a>
      <:- if UserCan bse_edit_prodopt_delete:article:>
      <a href="<:= cfg.admin_url2("add", "delete_option", { "id":article.id, "option_id":option.id, "_csrfp": request.get_csrf_token("admin_delete_option") }):>" data-action="Delete" data-object="Option" data-icon="trash" class="button">Delete</a>
      <:- or UserCan:>
      <a data-icon="trash" class="button disabled">Delete</a>
      <:- eif UserCan:>
    </nav>
  </header>
  <form action="<:script:>" method="post" data-object="Option">
    <input type="hidden" name="id" value="<:= article.id:>" />
    <input type="hidden" name="option_id" value="<:= option.id:>" />
    <input type="hidden" name="newvaluecount" id="newvaluecount" value="<:= cgi.param("newvaluecount") ? cgi.param("newvaluecount") : 0 :>" />
    <input type="hidden" name="r" value="<:= cgi.param("r"):>" />
    <:csrfp admin_save_option hidden:>
    <fieldset>
      <legend>Option</legend>
      <:.call "inlinefield", "name":"name", "field": { "description":"Name", "required":1 }, "options": { "default":option.name, "autofocus":1 } :>
      <:.call "inlinefield", "name":"enabled", "field": { "description":"Enabled", "htmltype":"checkbox" }, "options": { "default":option.enabled, "save_name":"save_enabled" } :>
      <!--<div class="field">
        <label class="field-label" for="type">HTML Type <:error_img type:></label>
        <span class="field-input">
          <select name="type" id="type">
            <option value="select"<:ifOr [ifMatch [old type] "select"] [ifMatch [option type] "select"]:> selected="selected"<:eif:>>Select Popup</option>
            <option value="radio"<:ifOr [ifMatch [old type] "radio"] [ifMatch [option type] "radio"]:> selected="selected"<:eif:>>Radio Buttons</option>
          </select>
          <:help edit type:>
        </span>
      </div>-->
    </fieldset>
    <fieldset id="option_values">
      <legend>Values <:error_img default_value:></legend>
      <:-.for dboptionvalue in [ option.values ]:>
      <div class="field-row">
        <div class="field">
          <label class="field-label" for="value<:= dboptionvalue.id:>">
            <!--:dboptionvalue_move:-->
            <:-.set option_id = option.id -:>
            <:-.set dboptionvalue_id = dboptionvalue.id -:>
            <:-.set refresh = cfg.admin_url2("add", "edit_option", { "id":article.id, "option_id":option_id }) -:>
    
            <:-.if request.user_can("bse_edit_prodopt_edit", product) :>
            <:-.set loop_next = loop.next -:>
            <:-.set loop_prev = loop.prev -:>
    
            <:-.set down_url = loop_next ? cfg.admin_url2("add", "option_value_movedown", { "id":article.id, "value_id":dboptionvalue_id, "_csrfp":request.get_csrf_token("admin_move_option_value"), "r":refresh }) : 0 -:>
            <:-.set up_url = loop_prev ? cfg.admin_url2("add", "option_value_moveup", { "id":article.id, "value_id":dboptionvalue_id, "_csrfp":request.get_csrf_token("admin_move_option_value"), "r":refresh }) : 0 -:>
            
            <:.call "make_arrows", "down_url":down_url, "up_url":up_url :>
            <:-.end if :>
            <input type="radio" name="default_value" value="<:= dboptionvalue.id:>" <:.if cgi.param("default_value") ? dboptionvalue.id eq cgi.param("default_value") : dboptionvalue.id eq option.default_value :>checked="checked"<:.end if:> />
            #<:= loop.count:> <span class="required">*</span> <:.call "error_img", "name": "value" _ dboptionvalue.id:>
          </label>
          <span class="field-input">
            <input type="text" name="value<:= dboptionvalue.id :>" id="value<:= dboptionvalue.id :>" value="<:.call "old", "name": "value" _ dboptionvalue.id, "default":dboptionvalue.value :>" required="required" class="<:.call "error_classname", "name":"value" _ dboptionvalue.id:>" />
            <:help edit value:>
          </span>
        </div>
        <div class="field">
          <label class="field-label" for="price<:= dboptionvalue.id:>">
            $
          </label>
          <span class="field-input">
            <input type="text" name="price<:= dboptionvalue.id :>" id="price<:= dboptionvalue.id:>" value="<:.call "old", "name":"price" _ dboptionvalue.id, "default": bse.number("money_input", dboptionvalue.get_custom("value_price") or 0) :>" placeholder="0.00" class="<:.call "error_classname", "name":"price" _ dboptionvalue.id:>" />
            <:help edit price:>
          </span>
          <span class="field-actions">
            <:-.if request.user_can("bse_edit_prodopt_edit", article) :>
            <a href="<:= cfg.admin_url2("add", "delete_option_value", { "id":article.id, "value_id":dboptionvalue_id, "_csrfp":request.get_csrf_token("admin_delete_option_value"), "r":refresh }):>" data-action="Delete" data-object="Value" class="button red small">Delete</a>
            <:-.end if:>
           </span>
        </div>
      </div>
      <:-.end for :>
  
      <:-.if cgi.param("newvaluecount"):>
      <:-.for i in [1 .. cgi.param("newvaluecount")]:>
      <div class="field-row">
        <div class="field">
          <label class="field-label" for="newvalue<:= i:>">#<:= dboptionvalue.size + i:> <span class="required">*</span> <:.call "error_img", "name":"newvalue" _ i:></label>
          <span class="field-input">
            <input type="text" name="newvalue<:= i:>" value="<:= cgi.param("newvalue" _ i):>" data-new="true" required="required" class="<:.call "error_classname", "name":"newvalue" _ i:>" />
          </span>
        </div>
        <div class="field">
          <label class="field-label" for="newprice<:= i:>">$ <:.call "error_img", "name":"newprice" _ i:></label>
          <span class="field-input">
            <input type="text" name="newprice<:= i:>" value="<:= cgi.param("newprice" _ i):>" data-new="true" placeholder="0.00" class="<:.call "error_classname", "name":"newprice" _ i:>" />
          </span>
          <span class="field-actions">
            <button class="button white small" data-icon="add" data-icon-only="true">Add</button>
            <button class="button white small" data-icon="subtract" data-icon-only="true">Delete</button>
          </span>
        </div>
      </div>
      <:-.end for:>
      <:-.end if:>
    </fieldset>
    <p class="buttons">
      <a href="<:= done_url:>" accesskey="." title="AccessKey = ." data-action="Cancel" class="button white">Cancel</a>
      <:-.if request.user_can("bse_edit_prodopt_save", article ):>
      <input type="submit" name="a_save_option" value="Save Changes" accesskey="s" title="AccessKey = s" class="button green" />
      <:-.end if:>
    </p>
  </form>
</div>
<:-.if request.user_can("bse_edit_prodopt_edit", article ):>
<script type="text/javascript">
    var optionValues = $("option_values");
    var oldValueCount = $$("input[name^=value][type=text]").length;
    var newValueCount = $("newvaluecount").value;
    var maxValueCount = 9;
    var requiredIndicator = new Element("span", { "class":"required" }).update(" *");

    var addButton = new Element("button", {
        "class":"button white small",
        "data-icon":"add",
        "data-icon-only":"true"
     }).update("Add");

    var delButton = new Element("button", {
        "class":"button white small",
        "data-icon":"subtract",
        "data-icon-only":"true"
    }).update("Delete");

    var firstAddButton = addButton.clone(true).addClassName("right");
    
    // On page load append first add button if there are new values
    if (newValueCount == 0) {
        optionValues.appendChild(firstAddButton.observe("click", plus));
    }
    // Otherwise on page load attatch events to in page buttons    
    else {
        $$("[data-icon=add]").invoke("observe", "click", plus);
        $$("[data-icon=subtract]").invoke("observe", "click", minus);
    }
    
    update();
    
    function plus(e) {
        e.preventDefault();
        e.stopPropagation();
        // cache the current newValueCount for later
        var currentNewValueCount = newValueCount;
        ++newValueCount;

        var row = new Element("div", { "class":"field-row" });
        
        // New value field
        var name = "newvalue" + newValueCount;

        var div = new Element("div", { "class":"field" });

        var label = new Element("label", { "for":name, "class":"field-label" }).update("#" + parseInt(oldValueCount + newValueCount));
        div.appendChild(label);

        label.appendChild(requiredIndicator.clone(true));
    
        var span = new Element("span", { "class":"field-input" });
        div.appendChild(span);
    
        var input = new Element("input", { "type":"text", "name":name, "id":name, "data-new":"true", "required":"required" });
        span.appendChild(input);

        row.appendChild(div);


        // New price field

        var name = "newprice" + newValueCount;

        var div = new Element("div", { "class":"field" });

        var label = new Element("label", { "for":name, "class":"field-label" }).update("$");
        div.appendChild(label);
    
        var span = new Element("span", { "class":"field-input" });
        div.appendChild(span);
    
        var input = new Element("input", { "type":"text", "name":name, "id":name, "data-new":"true", "placeholder":"0.00" });
        span.appendChild(input);

        var actions = new Element("span", { "class":"field-actions" });
        actions.appendChild(addButton.clone(true).observe("click", plus));
        // add a space so our buttons don’t collide
        actions.appendChild(document.createTextNode(" "));
        actions.appendChild(delButton.clone(true).observe("click", minus));
        div.appendChild(actions);

        row.appendChild(div);
        
        if (currentNewValueCount == 0) {
            optionValues.insertBefore(row, firstAddButton);
            firstAddButton.remove();
        }
        // prevent insertion of new fields maxValueCount is reached
        else if (currentNewValueCount < maxValueCount) {
            optionValues.insertBefore(row, this.up(".field-row").nextSibling);
        }
        
        //Reinitialise changesMonitor to include new inputs
        //Originally initialised in init.js

        changesMonitor.initialize();
        update();
    };
    
    function minus(e) {
        e.preventDefault();
        e.stopPropagation();
        --newValueCount;

        this.up(".field-row").remove();
        
        if (newValueCount == 0) {
            optionValues.appendChild(firstAddButton.observe("click", plus));
        }

        update();

        //Reinitialise changesMonitor to include new inputs
        //Originally initialised in init.js

        changesMonitor.initialize();
    };
    
    function update() {
        $("newvaluecount").value = newValueCount;
        
        var newValueInputs = $$("input[name^=newvalue][type=text][data-new]");
        
        for (var i = 0; i < newValueInputs.length; ++i) {
            var loop = parseInt(i + 1);
            var name = "newvalue" + loop;

            var input = newValueInputs[i];
            input.setAttribute("name", name);
            input.setAttribute("id", name);
            
            var label = input.up("div").down("label");
            label.update("#" + parseInt(oldValueCount + loop)).appendChild(requiredIndicator.clone(true));
            label.setAttribute("for", name);
        }
     
        var newPriceInputs = $$("input[name^=newprice][type=text][data-new]");
        
        for (var i = 0; i < newPriceInputs.length; ++i) {
            var loop = parseInt(i + 1);
            var name = "newprice" + loop;

            var input = newPriceInputs[i];
            input.setAttribute("name", name);
            input.setAttribute("id", name);
            
            var label = input.up("div").down("label");
            label.setAttribute("for", name);
        }
                
        // diasable all add buttons when maxValueCount is reached
        if (newValueCount == maxValueCount) {
            $$("[data-icon=add]").invoke("writeAttribute", "disabled", true);
        }        
        // enable all add buttons when leaving maxValueCount
        if (newValueCount < maxValueCount) {
            $$("[data-icon=add]").invoke("writeAttribute", "disabled", false);
        }
    };
</script>
<:-.end if:>
